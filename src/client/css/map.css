.mapStyle {
	display: contents;
}

.mapContainer {
	height: 100%;
}

.leaflet-control-layers-list {
	font-size: 1.4rem;

	label {
		cursor: pointer;
		margin-bottom: 0.3em;
	}

	input {
		top: 0;
	}
}

.leaflet-popup {
	max-width: 95vw;
	min-width: min(28vw, 550px);
	filter:
		drop-shadow(1px 2px 0px var(--main)) drop-shadow(-1px -1px 0px var(--main)) drop-shadow(2px 2px 10px var(--bg)) opacity(0.85);
	scale: 1 0;
	animation: scaleIn 0.5s ease-in-out forwards;
	transform-origin: center 180%;
	padding-top: 0.4em;


	&[class] {
		/* overwrite leaflet default */
		transition: opacity 1s;
	}

	.bg::after {
		content: "";
		position: absolute;
		inset: 0;
		z-index: -1;
	}

	.leaflet-popup-tip,
	.bg::after {
		background-color: var(--contrastText);
	}
}

.leaflet-popup-content-wrapper {
	display: flex;
	padding: 0;
	border-radius: 0;
	background: transparent;
	box-shadow: none;
}


.leaflet-popup-content {
	font-size: 1.2rem;
	padding: 0;
	margin: 0;
	color: var(--text);
	min-width: fit-content;
	flex-grow: 1;

	.MuiTab-root {
		color: var(--text);
		border-bottom: 2px solid var(--text);
		transition: 0.5s color;
		min-width: auto;
		flex-grow: 1;
		padding-inline: 0.5em;

		&.Mui-selected {
			color: var(--main);
		}

		&:last-child {
			padding-inline-end: 0.4em;
		}
	}

	.blendIn {
		display: inline;
		border: 0;
		color: inherit;
		background: transparent;
		margin: 0; padding: 0;
		text-decoration: underline;
		appearance: none;
		font-size: inherit;
		font-weight: normal;
		font-style: inherit;
	}
}

.popupList {
	display: grid;
	grid-template-columns: auto auto;
	grid-auto-rows: min-content;
	font-size: 1.4em;
	min-height: 7.5em;
	padding-top: 0.25em;
	color: var(--contrastBackground);

	a[href] {
		color: inherit;
	}

	.small {
		color: color-mix(in oklch, currentColor 80%, transparent);
		font-size: 0.75em;
		padding-block: 0.35em;
	}

	.alert {
		color: var(--alert);
	}

	.buttons {
		display: flex;
		justify-content: flex-end;
		gap: 0.75em;
	}

	dd,
	dt {
		padding: 0.5rem 1.2rem;

		&:last-child {
			padding-block-end: 1.2rem;
		}
	}

	dd {
		text-align: right;
	}

	&> :nth-of-type(even) {
		background: color-mix(in oklch, currentColor 10%, transparent);
	}
}


.leaflet-overlay-pane canvas {
	/* polyline */
	filter: drop-shadow(0px 0px 3px var(--neutral));
}

.marker-cluster[class] {
	/* overwrite default cluster style */
	background: none;

	div {
		background-color: var(--semiContrastBackground);
		font-weight: bold;
		box-shadow: inset 0 0 2px 2px var(--contrastBackground);

		span {
			color: var(--contrastText);
			font-size: 1.5rem;
		}
	}
}

.easy-button-button {
	&.active {
		color: red;
	}
}

.customMarker {
	--fillColor: var(--contrastText, currentColor);

	& .icon {
		height: 100%;
	}

	& .icon.start,
	& .icon.end {
		display: flex;
		place-content: center;
		border: 2px solid var(--contrastBackground);
		outline: 3px solid var(--contrastBackground);
		outline-offset: 3px;
		border-radius: 50%;
		background: var(--contrastBackground);

		svg {
			height: 80%;
		}
	}

	& .icon.end {
		z-index: 9999;
		/* over cluster group */
	}

	& .icon.animate {
		--distance: 100px;
		opacity: 0;
		transform: translate(0, var(--distance));
		animation: moveIn 1s ease-out forwards;
	}

	& .icon.start {
		outline: none;
	}

	& .icon.none {
		filter: drop-shadow(0 0 5px var(--contrastBackground));
	}

	& .icon.maxSpeed {
		svg {
			--fillColor: var(--alert);
		}
		&.none svg {
			--fillColor: inherit;
			stroke: var(--alert);
    	stroke-width: 15px;
		}


	}

	&.geoLocation {
		border-radius: 50%;
		background: transparent;
		color: var(--info);
		border: none;
		outline-color: currentColor;
		outline-offset: 1px;
		outline-style: solid;
		filter: drop-shadow(0 0 5px var(--contrastBackground));

	}
}

.customPolyline.animate {
	stroke-dasharray: 600;
	stroke-dashoffset: 600;
	opacity: 0;
	animation: moveIn 2s 0.2s ease-out forwards;
}

@keyframes moveIn {
	99% {
		opacity: 1;
		stroke-dashoffset: 0;
		transform: translate(0, 0);
		stroke-dasharray: 600;
	}

	to {
		opacity: 1;
		stroke-dashoffset: 0;
		stroke-dasharray: 0;
		transform: translate(0, 0);
	}
}

@keyframes scaleIn {
	to {
		scale: 1 1;
	}
}
